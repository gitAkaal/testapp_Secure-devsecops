name: Comprehensive Security Scan

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dast
          - dependency
          - container
          - infrastructure
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  schedule:
    # Run security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: 1
  SCAN_SEVERITY_THRESHOLD: 'MEDIUM'

jobs:
  # Pre-flight checks and file analysis
  prepare:
    name: Prepare and Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.detect.outputs.has_python }}
      has_node: ${{ steps.detect.outputs.has_node }}
      has_docker: ${{ steps.detect.outputs.has_docker }}
      has_terraform: ${{ steps.detect.outputs.has_terraform }}
      has_kubernetes: ${{ steps.detect.outputs.has_kubernetes }}
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      scan_matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          separator: ','
          files_ignore: |
            *.md
            *.txt
            LICENSE
            .gitignore

      - name: Detect project types
        id: detect
        run: |
          echo "has_python=$([[ -f requirements.txt || -f Pipfile || -f pyproject.toml || -f setup.py ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_node=$([[ -f package.json || -f yarn.lock || -f pnpm-lock.yaml ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_docker=$([[ -f Dockerfile || -f docker-compose.yml || -f docker-compose.yaml ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_terraform=$([[ -d terraform || -f *.tf || -f *.tfvars ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_kubernetes=$([[ -d k8s || -d kubernetes || -f *.yaml || -f *.yml ]] && echo true || echo false)" >> $GITHUB_OUTPUT

      - name: Generate scan matrix
        id: matrix
        run: |
          matrix="{\"include\":["
          items=""
          
          if [[ "${{ github.event.inputs.scan_type }}" == "all" ]] || [[ -z "${{ github.event.inputs.scan_type }}" ]]; then
            items="${items}{\"scan\":\"all\"},"
          else
            items="${items}{\"scan\":\"${{ github.event.inputs.scan_type }}\"},"
          fi
          
          matrix="${matrix}${items%,}]}"
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      always() && 
      needs.prepare.result == 'success' &&
      (github.event.inputs.scan_type == 'all' || 
       github.event.inputs.scan_type == 'sast' || 
       github.event.inputs.scan_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Semgrep - Multi-language SAST
      - name: Semgrep Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/cwe-top-25
            p/gitlab
          generateSarif: true
        continue-on-error: true

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,python,java,go,csharp'
          queries: security-and-quality
        continue-on-error: true

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      # Bandit for Python
      - name: Bandit Security Scan
        if: needs.prepare.outputs.has_python == 'true'
        run: |
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f sarif -o bandit.sarif || true
        continue-on-error: true

      # GitLeaks - Secret Detection
      - name: Gitleaks Secret Scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      # TruffleHog - Secret Detection
      - name: TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Upload SAST Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            semgrep.sarif
            bandit.sarif
        continue-on-error: true

  # Dependency Security Scanning
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      always() && 
      needs.prepare.result == 'success' &&
      (github.event.inputs.scan_type == 'all' || 
       github.event.inputs.scan_type == 'dependency' || 
       github.event.inputs.scan_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ github.repository }}
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --nvdApiKey ${{ secrets.NVD_API_KEY }}
        continue-on-error: true

      # Snyk Security Scan
      - name: Run Snyk Security Scan
        uses: snyk/actions/node@master
        if: needs.prepare.outputs.has_node == 'true'
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=${{ env.SCAN_SEVERITY_THRESHOLD }}
        continue-on-error: true

      # Python Safety Check
      - name: Python Safety Check
        if: needs.prepare.outputs.has_python == 'true'
        run: |
          pip install safety
          safety check --json > safety-report.json || true
          safety check || true
        continue-on-error: true

      # NPM Audit
      - name: NPM Audit
        if: needs.prepare.outputs.has_node == 'true'
        run: |
          npm audit --audit-level=moderate || true
          npm audit --json > npm-audit.json || true
        continue-on-error: true

      # OSV Scanner
      - name: Run OSV Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: |-
            --recursive
            --skip-git
            ./
        continue-on-error: true

      - name: Upload Dependency Check Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: |
            dependency-check-report.*
            safety-report.json
            npm-audit.json

  # Container Security Scanning
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      always() && 
      needs.prepare.result == 'success' &&
      needs.prepare.outputs.has_docker == 'true' &&
      (github.event.inputs.scan_type == 'all' || 
       github.event.inputs.scan_type == 'container' || 
       github.event.inputs.scan_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        id: docker-build
        run: |
          docker build -t ${{ github.repository }}:${{ github.sha }} .
          echo "image=${{ github.repository }}:${{ github.sha }}" >> $GITHUB_OUTPUT
        continue-on-error: true

      # Trivy Container Scan
      - name: Run Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        if: steps.docker-build.outcome == 'success'
        with:
          image-ref: ${{ steps.docker-build.outputs.image }}
          format: 'sarif'
          output: 'trivy-container.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
        continue-on-error: true

      # Grype Container Scan
      - name: Run Grype Container Scan
        uses: anchore/scan-action@v3
        if: steps.docker-build.outcome == 'success'
        with:
          image: ${{ steps.docker-build.outputs.image }}
          severity-cutoff: medium
          fail-build: false
        continue-on-error: true

      # Hadolint - Dockerfile Linting
      - name: Hadolint Dockerfile Scan
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint.sarif
          no-fail: true
        continue-on-error: true

      # Docker Scout
      - name: Docker Scout Scan
        if: steps.docker-build.outcome == 'success'
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ steps.docker-build.outputs.image }}
          sarif-file: docker-scout.sarif
          summary: true
        continue-on-error: true

      - name: Upload Container Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            trivy-container.sarif
            hadolint.sarif
            docker-scout.sarif
        continue-on-error: true

  # Infrastructure as Code Security Scanning
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      always() && 
      needs.prepare.result == 'success' &&
      (needs.prepare.outputs.has_terraform == 'true' || 
       needs.prepare.outputs.has_kubernetes == 'true') &&
      (github.event.inputs.scan_type == 'all' || 
       github.event.inputs.scan_type == 'infrastructure' || 
       github.event.inputs.scan_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Checkov - IaC Security Scanner
      - name: Checkov Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: false
          soft_fail: true
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif
        continue-on-error: true

      # Terrascan
      - name: Terrascan IaC Scan
        if: needs.prepare.outputs.has_terraform == 'true'
        run: |
          docker run --rm -v "$(pwd):/src" \
            tenable/terrascan scan \
            -t aws,azure,gcp,k8s \
            -f . \
            -o sarif > terrascan.sarif || true
        continue-on-error: true

      # KICS - Keeping Infrastructure as Code Secure
      - name: KICS Security Scan
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: .
          output_path: kics-results
          output_formats: 'json,sarif'
          fail_on: high
          enable_comments: true
        continue-on-error: true

      # Kubesec for Kubernetes
      - name: Kubesec Scan
        if: needs.prepare.outputs.has_kubernetes == 'true'
        run: |
          find . -name "*.yaml" -o -name "*.yml" | \
          while read file; do
            if grep -q "kind:" "$file"; then
              docker run -v $(pwd):/app kubesec/kubesec:latest \
                scan /app/$file >> kubesec-results.json || true
            fi
          done
        continue-on-error: true

      - name: Upload IaC Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            checkov.sarif
            terrascan.sarif
            kics-results/results.sarif
        continue-on-error: true

  # Dynamic Application Security Testing (DAST)
  dast-scan:
    name: DAST Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      always() && 
      needs.prepare.result == 'success' &&
      (github.event.inputs.scan_type == 'dast' || 
       github.event.inputs.scan_type == 'all')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # ZAP DAST Scan
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: ${{ secrets.DAST_TARGET_URL || 'http://localhost:8080' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN'
          allow_issue_writing: false
          artifact_name: zap_scan
        continue-on-error: true

      # Nuclei Security Scan
      - name: Nuclei DAST Scan
        uses: projectdiscovery/nuclei-action@main
        with:
          target: ${{ secrets.DAST_TARGET_URL || 'http://localhost:8080' }}
          flags: '-severity critical,high,medium'
          output: nuclei-report.json
        continue-on-error: true

      # API Security Testing with Postman/Newman
      - name: API Security Testing
        if: needs.prepare.outputs.has_node == 'true'
        run: |
          if [ -f "postman_collection.json" ]; then
            npm install -g newman
            newman run postman_collection.json \
              --environment postman_environment.json \
              --reporters cli,json \
              --reporter-json-export newman-report.json || true
          fi
        continue-on-error: true

      - name: Upload DAST Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dast-scan-results
          path: |
            zap_scan/
            nuclei-report.json
            newman-report.json

  # License Compliance Scan
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      always() && 
      needs.prepare.result == 'success' &&
      (github.event.inputs.scan_type == 'all' || 
       github.event.inputs.scan_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # FOSSA License Scan
      - name: FOSSA License Scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
        continue-on-error: true

      # License Finder
      - name: License Finder Scan
        run: |
          docker run --rm -v $(pwd):/scan licensefinder/license_finder \
            /bin/bash -lc "cd /scan && license_finder report --format json" \
            > license-report.json || true
        continue-on-error: true

  # Security Report Generation
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: 
      - sast-scan
      - dependency-scan
      - container-scan
      - iac-scan
      - dast-scan
      - license-scan
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
        continue-on-error: true

      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary Report" > security-summary.md
          echo "**Scan Date:** $(date)" >> security-summary.md
          echo "**Repository:** ${{ github.repository }}" >> security-summary.md
          echo "**Commit:** ${{ github.sha }}" >> security-summary.md
          echo "**Triggered By:** ${{ github.actor }}" >> security-summary.md
          echo "" >> security-summary.md
          
          echo "## Scan Results" >> security-summary.md
          echo "| Scan Type | Status |" >> security-summary.md
          echo "|-----------|--------|" >> security-summary.md
          echo "| SAST | ${{ needs.sast-scan.result }} |" >> security-summary.md
          echo "| Dependency | ${{ needs.dependency-scan.result }} |" >> security-summary.md
          echo "| Container | ${{ needs.container-scan.result }} |" >> security-summary.md
          echo "| IaC | ${{ needs.iac-scan.result }} |" >> security-summary.md
          echo "| DAST | ${{ needs.dast-scan.result }} |" >> security-summary.md
          echo "| License | ${{ needs.license-scan.result }} |" >> security-summary.md
          
          echo "" >> security-summary.md
          echo "## Recommendations" >> security-summary.md
          echo "- Review all HIGH and CRITICAL vulnerabilities immediately" >> security-summary.md
          echo "- Update dependencies with known vulnerabilities" >> security-summary.md
          echo "- Implement security fixes before deployment" >> security-summary.md
          echo "- Consider enabling branch protection rules" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      - name: Comment PR with Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('security-summary.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
        continue-on-error: true

      # Send notifications if configured
      - name: Send Slack Notification
        if: always() && env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                title: 'Security Scan Completed',
                text: `Repository: ${{ github.repository }}\nStatus: ${{ job.status }}\nTriggered by: ${{ github.actor }}`,
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true

  # Compliance and Policy Checks
  policy-check:
    name: Policy and Compliance Check
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      always() && 
      needs.prepare.result == 'success' &&
      (github.event.inputs.scan_type == 'all' || 
       github.event.inputs.scan_type == '')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Open Policy Agent (OPA) Policy Check
      - name: OPA Policy Check
        run: |
          if [ -d "policies" ]; then
            docker run --rm -v $(pwd):/project \
              openpolicyagent/opa test /project/policies || true
          fi
        continue-on-error: true

      # Git Security Checks
      - name: Git Security Checks
        run: |
          # Check for signed commits
          git log --pretty="format:%H %G?" -10 | grep -v "G" && \
            echo "Warning: Found unsigned commits" || \
            echo "All recent commits are signed"
          
          # Check branch protection
          echo "Ensure branch protection rules are configured in repository settings"
        continue-on-error: true

# Security Best Practices:
# 1. Always use specific versions for actions (e.g., @v4 instead of @main)
# 2. Use GITHUB_TOKEN with minimal required permissions
# 3. Store sensitive data in secrets, never hardcode
# 4. Enable Dependabot for automatic dependency updates
# 5. Implement branch protection rules
# 6. Use environment-specific secrets for different stages
# 7. Regular security training for development team
# 8. Implement security champions program
# 9. Regular security audits and penetration testing
# 10. Maintain security runbooks and incident response procedures