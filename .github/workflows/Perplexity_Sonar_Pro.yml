name: Perplexity Sonar Reasoning Pro Security Pipeline

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Select scan scope'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - essential
          - sast
          - dast
          - dependency
          - container
          - infrastructure
      force_all_scans:
        description: 'Force run all scans (override skip logic)'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  schedule:
    - cron: '0 * * 1 *'

env:
  SCAN_SEVERITY: 'MEDIUM'
  DOCKER_BUILDKIT: 1
  IS_MANUAL_TRIGGER: ${{ github.event_name == 'workflow_dispatch' }}
  IS_SCHEDULED: ${{ github.event_name == 'schedule' }}
  FORCE_ALL_SCANS: ${{ github.event.inputs.force_all_scans == 'true' }}

jobs:
  prepare:
    name: 🔍 Analyze Repository
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.detect.outputs.has_python }}
      has_node: ${{ steps.detect.outputs.has_node }}
      has_docker: ${{ steps.detect.outputs.has_docker }}
      has_terraform: ${{ steps.detect.outputs.has_terraform }}
      has_kubernetes: ${{ steps.detect.outputs.has_kubernetes }}
      run_full_scan: ${{ steps.scan-logic.outputs.run_full_scan }}
      run_dast: ${{ steps.scan-logic.outputs.run_dast }}
      run_container: ${{ steps.scan-logic.outputs.run_container }}
      run_iac: ${{ steps.scan-logic.outputs.run_iac }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: 🔎 Detect Technologies
        id: detect
        run: |
          has_python="false"
          has_node="false"
          has_docker="false"
          has_terraform="false"
          has_kubernetes="false"
          
          [[ -f "requirements.txt" || -f "pyproject.toml" || -f "setup.py" ]] && has_python="true"
          [[ -f "package.json" || -f "yarn.lock" ]] && has_node="true"
          [[ -f "Dockerfile" || -f "docker-compose.yml" ]] && has_docker="true"
          [[ -f "*.tf" || -d "terraform" ]] && has_terraform="true"
          [[ -d "k8s" || -d "kubernetes" ]] && has_kubernetes="true"
          
          echo "has_python=$has_python" >> $GITHUB_OUTPUT
          echo "has_node=$has_node" >> $GITHUB_OUTPUT
          echo "has_docker=$has_docker" >> $GITHUB_OUTPUT
          echo "has_terraform=$has_terraform" >> $GITHUB_OUTPUT
          echo "has_kubernetes=$has_kubernetes" >> $GITHUB_OUTPUT

      - name: 🎯 Configure Scan Logic
        id: scan-logic
        run: |
          if [[ "${{ env.IS_MANUAL_TRIGGER }}" == "true" || "${{ env.IS_SCHEDULED }}" == "true" || "${{ env.FORCE_ALL_SCANS }}" == "true" ]]; then
            echo "run_full_scan=true" >> $GITHUB_OUTPUT
            echo "run_dast=true" >> $GITHUB_OUTPUT
            echo "run_container=true" >> $GITHUB_OUTPUT
            echo "run_iac=true" >> $GITHUB_OUTPUT
          else
            echo "run_full_scan=false" >> $GITHUB_OUTPUT
            echo "run_dast=false" >> $GITHUB_OUTPUT
            echo "run_container=false" >> $GITHUB_OUTPUT
            echo "run_iac=false" >> $GITHUB_OUTPUT
          fi

  dast-scan:
    name: 🌐 Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.run_dast == 'true' || github.event.inputs.scan_type == 'dast' || github.event.inputs.scan_type == 'all' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4.1.1

      - name: 🔧 Set up Docker
        uses: docker/setup-buildx-action@v3.1.0

      - name: 🚀 Build and Run Java Application
        if: ${{ needs.prepare.outputs.has_java == 'true' }}
        run: |
          cd java_wordstop
          mvn clean package
          java -jar target/*.jar &
          sleep 10
        continue-on-error: true

      - name: 🐍 Build and Run Python Application
        if: ${{ needs.prepare.outputs.has_python == 'true' }}
        run: |
          cd python_wordstop
          pip install -r requirements.txt
          python wordstop.py &
          sleep 5
        continue-on-error: true

      - name: ⚡ ZAP Full Security Scan - Java App
        if: ${{ needs.prepare.outputs.has_java == 'true' }}
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: 'http://localhost:8080'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-j -a'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          allow_issue_writing: true
          fail_action: false
        continue-on-error: true

      - name: ⚡ ZAP Full Security Scan - Python App
        if: ${{ needs.prepare.outputs.has_python == 'true' }}
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: 'http://localhost:5000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-j -a'
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          allow_issue_writing: true
          fail_action: false
        continue-on-error: true

      - name: 🔍 Runtime Security Analysis
        run: |
          ps aux | grep -E "java|python" || true
          netstat -tulpn || true
          find . -name "*.log" -type f -exec tail -n 50 {} \; || true
        continue-on-error: true

  security-report:
    name: 📊 Security Report Generator
    runs-on: ubuntu-latest
    if: always()
    needs: [prepare, dast-scan]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4.1.1

      - name: 📋 Generate Security Dashboard
        run: |
          echo "# 🔐 DevSecOps Security Analysis Report" > SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "## 📈 Scan Overview" >> SECURITY_REPORT.md
          echo "- **📅 Execution Date:** $(date)" >> SECURITY_REPORT.md
          echo "- **📦 Repository:** ${{ github.repository }}" >> SECURITY_REPORT.md
          echo "- **🔄 Commit SHA:** \`${{ github.sha }}\`" >> SECURITY_REPORT.md
          echo "- **👤 Triggered By:** @${{ github.actor }}" >> SECURITY_REPORT.md
          echo "- **🎯 Scan Type:** ${{ github.event.inputs.scan_type || 'commit-triggered' }}" >> SECURITY_REPORT.md

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4.1.0
        with:
          name: security-analysis-report
          path: SECURITY_REPORT.md
