name: claude opus 4.1 Security Scan Pipeline

on:
  workflow_dispatch:
    inputs:
      force_all_scans:
        description: 'Run all security scans regardless of changes'
        required: false
        default: true
        type: boolean
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - sast
          - dependency
          - container
          - infrastructure
          - compliance
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  schedule:
    # Daily security scan at 2 AM UTC
    - cron: '0 2 * * *'

env:
  # Global configuration
  SCAN_SEVERITY_THRESHOLD: 'MEDIUM'
  ENABLE_COMMENTS: true
  # Force all scans for manual triggers and scheduled runs
  FORCE_ALL_SCANS: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}

jobs:
  # ============================================
  # PREPARATION AND CHANGE DETECTION
  # ============================================
  prepare:
    name: üîç Analyze Changes & Prepare
    runs-on: ubuntu-latest
    outputs:
      should_scan_sast: ${{ steps.decision.outputs.should_scan_sast }}
      should_scan_dependencies: ${{ steps.decision.outputs.should_scan_dependencies }}
      should_scan_container: ${{ steps.decision.outputs.should_scan_container }}
      should_scan_iac: ${{ steps.decision.outputs.should_scan_iac }}
      should_scan_compliance: ${{ steps.decision.outputs.should_scan_compliance }}
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      scan_summary: ${{ steps.decision.outputs.scan_summary }}
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üìù Get Changed Files
        id: changed-files
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: tj-actions/changed-files@v41
        with:
          separator: ','
          files_separator: '\n'
          output_renamed_files_as_deleted_and_added: true

      - name: üéØ Determine Required Scans
        id: decision
        run: |
          echo "üîç Analyzing repository and changes..."
          
          # Check if we should force all scans
          FORCE_ALL="${{ env.FORCE_ALL_SCANS }}"
          MANUAL_TRIGGER="${{ github.event_name == 'workflow_dispatch' }}"
          MANUAL_FORCE="${{ github.event.inputs.force_all_scans }}"
          
          # Initialize scan decisions
          SCAN_SAST="false"
          SCAN_DEPS="false"
          SCAN_CONTAINER="false"
          SCAN_IAC="false"
          SCAN_COMPLIANCE="false"
          
          # Force all scans for manual triggers, scheduled runs, or when specified
          if [[ "$FORCE_ALL" == "true" ]] || [[ "$MANUAL_FORCE" == "true" ]] || [[ "$MANUAL_TRIGGER" == "true" ]]; then
            echo "‚úÖ Manual trigger or scheduled run detected - ALL scans will be performed"
            SCAN_SAST="true"
            SCAN_DEPS="true"
            SCAN_CONTAINER="true"
            SCAN_IAC="true"
            SCAN_COMPLIANCE="true"
          else
            echo "üìä Commit-based trigger - analyzing changes to determine required scans..."
            
            # Get changed files
            CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
            
            # SAST: Scan if code files changed
            if echo "$CHANGED_FILES" | grep -qE '\.(py|js|ts|java|go|cs|rb|php|swift|kt|scala|rs|c|cpp|h|hpp)$'; then
              SCAN_SAST="true"
              echo "  ‚úì Code changes detected - SAST scan required"
            fi
            
            # Dependencies: Scan if dependency files changed
            if echo "$CHANGED_FILES" | grep -qE '(package\.json|requirements\.txt|Gemfile|pom\.xml|build\.gradle|go\.mod|Cargo\.toml|composer\.json|Pipfile|poetry\.lock|yarn\.lock|package-lock\.json)'; then
              SCAN_DEPS="true"
              echo "  ‚úì Dependency changes detected - Dependency scan required"
            fi
            
            # Container: Scan if Docker files changed
            if echo "$CHANGED_FILES" | grep -qE '(Dockerfile|docker-compose\.yml|docker-compose\.yaml|\.dockerignore)'; then
              SCAN_CONTAINER="true"
              echo "  ‚úì Container changes detected - Container scan required"
            fi
            
            # IaC: Scan if infrastructure files changed
            if echo "$CHANGED_FILES" | grep -qE '\.(tf|tfvars|yaml|yml|json)$' || echo "$CHANGED_FILES" | grep -qE '(terraform/|k8s/|kubernetes/|helm/|ansible/)'; then
              SCAN_IAC="true"
              echo "  ‚úì Infrastructure changes detected - IaC scan required"
            fi
            
            # Compliance: Always run on main branch commits
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              SCAN_COMPLIANCE="true"
              echo "  ‚úì Main branch commit - Compliance scan required"
            fi
            
            # If no specific changes detected, run basic scans
            if [[ "$SCAN_SAST" == "false" ]] && [[ "$SCAN_DEPS" == "false" ]] && [[ "$SCAN_CONTAINER" == "false" ]] && [[ "$SCAN_IAC" == "false" ]]; then
              echo "  ‚ÑπÔ∏è No specific changes detected - running basic security scans"
              SCAN_SAST="true"
              SCAN_DEPS="true"
            fi
          fi
          
          # Output decisions
          echo "should_scan_sast=$SCAN_SAST" >> $GITHUB_OUTPUT
          echo "should_scan_dependencies=$SCAN_DEPS" >> $GITHUB_OUTPUT
          echo "should_scan_container=$SCAN_CONTAINER" >> $GITHUB_OUTPUT
          echo "should_scan_iac=$SCAN_IAC" >> $GITHUB_OUTPUT
          echo "should_scan_compliance=$SCAN_COMPLIANCE" >> $GITHUB_OUTPUT
          
          # Create summary
          SUMMARY="üìã **Scan Plan:**\n"
          SUMMARY="${SUMMARY}- SAST: $([ "$SCAN_SAST" == "true" ] && echo "‚úÖ Enabled" || echo "‚è≠Ô∏è Skipped")\n"
          SUMMARY="${SUMMARY}- Dependencies: $([ "$SCAN_DEPS" == "true" ] && echo "‚úÖ Enabled" || echo "‚è≠Ô∏è Skipped")\n"
          SUMMARY="${SUMMARY}- Container: $([ "$SCAN_CONTAINER" == "true" ] && echo "‚úÖ Enabled" || echo "‚è≠Ô∏è Skipped")\n"
          SUMMARY="${SUMMARY}- Infrastructure: $([ "$SCAN_IAC" == "true" ] && echo "‚úÖ Enabled" || echo "‚è≠Ô∏è Skipped")\n"
          SUMMARY="${SUMMARY}- Compliance: $([ "$SCAN_COMPLIANCE" == "true" ] && echo "‚úÖ Enabled" || echo "‚è≠Ô∏è Skipped")"
          
          echo "scan_summary<<EOF" >> $GITHUB_OUTPUT
          echo -e "$SUMMARY" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: üìä Display Scan Plan
        run: |
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "         SECURITY SCAN PLAN"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo ""
          echo "Trigger Type: ${{ github.event_name }}"
          echo "Branch: ${{ github.ref_name }}"
          echo ""
          echo -e "${{ steps.decision.outputs.scan_summary }}"
          echo ""
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

  # ============================================
  # SAST - STATIC APPLICATION SECURITY TESTING
  # ============================================
  sast-scan:
    name: üîê SAST Security Analysis
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_scan_sast == 'true'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üîç Semgrep Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/cwe-top-25
          generateSarif: true
        continue-on-error: true

      - name: üïµÔ∏è GitLeaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: üîê TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified
        continue-on-error: true

      - name: üìä Generate SAST Report
        if: always()
        run: |
          echo "## üîê SAST Scan Results" > sast-summary.md
          echo "‚úÖ Semgrep scan completed" >> sast-summary.md
          echo "‚úÖ Secret detection completed" >> sast-summary.md
          echo "" >> sast-summary.md
          echo "Check the Security tab for detailed findings" >> sast-summary.md

      - name: üì§ Upload SAST Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-results
          path: |
            semgrep.sarif
            sast-summary.md

  # ============================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ============================================
  dependency-scan:
    name: üì¶ Dependency Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_scan_dependencies == 'true'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîç OSV Scanner
        uses: google/osv-scanner-action@v1.7.0
        with:
          scan-args: |-
            --recursive
            --skip-git
            ./
        continue-on-error: true

      - name: üõ°Ô∏è OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ github.repository }}
          path: '.'
          format: 'HTML,JSON,SARIF'
          args: >
            --enableRetired
            --enableExperimental
        continue-on-error: true

      - name: üìä Generate Dependency Report
        if: always()
        run: |
          echo "## üì¶ Dependency Scan Results" > dependency-summary.md
          echo "‚úÖ OSV Scanner completed" >> dependency-summary.md
          echo "‚úÖ OWASP Dependency Check completed" >> dependency-summary.md
          
          # Count vulnerabilities if report exists
          if [ -f "dependency-check-report.json" ]; then
            echo "" >> dependency-summary.md
            echo "### Vulnerability Summary:" >> dependency-summary.md
            echo "Check artifacts for detailed report" >> dependency-summary.md
          fi

      - name: üì§ Upload Dependency Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-results
          path: |
            dependency-check-report.*
            dependency-summary.md

  # ============================================
  # CONTAINER SECURITY SCANNING
  # ============================================
  container-scan:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_scan_container == 'true'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîç Check for Dockerfile
        id: dockerfile-check
        run: |
          if [ -f "Dockerfile" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Dockerfile found"
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è No Dockerfile found - skipping container build"
          fi

      - name: üèóÔ∏è Build Container Image
        id: build
        if: steps.dockerfile-check.outputs.found == 'true'
        run: |
          docker build -t scan-image:${{ github.sha }} . || true
          echo "image=scan-image:${{ github.sha }}" >> $GITHUB_OUTPUT

      - name: üîç Trivy Container Scan
        if: steps.dockerfile-check.outputs.found == 'true'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.build.outputs.image }}
          format: 'sarif'
          output: 'trivy.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
        continue-on-error: true

      - name: üìù Hadolint Dockerfile Lint
        if: steps.dockerfile-check.outputs.found == 'true'
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint.sarif
          no-fail: true

      - name: üîç Grype Vulnerability Scan
        if: steps.dockerfile-check.outputs.found == 'true'
        uses: anchore/scan-action@v3
        with:
          image: ${{ steps.build.outputs.image }}
          severity-cutoff: medium
          fail-build: false
        continue-on-error: true

      - name: üìä Generate Container Report
        if: always()
        run: |
          echo "## üê≥ Container Scan Results" > container-summary.md
          if [ "${{ steps.dockerfile-check.outputs.found }}" == "true" ]; then
            echo "‚úÖ Trivy scan completed" >> container-summary.md
            echo "‚úÖ Hadolint analysis completed" >> container-summary.md
            echo "‚úÖ Grype scan completed" >> container-summary.md
          else
            echo "‚ö†Ô∏è No Dockerfile found - container scans skipped" >> container-summary.md
          fi

      - name: üì§ Upload Container Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-results
          path: |
            trivy.sarif
            hadolint.sarif
            container-summary.md

  # ============================================
  # INFRASTRUCTURE AS CODE SCANNING
  # ============================================
  iac-scan:
    name: üèóÔ∏è Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_scan_iac == 'true'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üîç Checkov IaC Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: false
          soft_fail: true
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif
        continue-on-error: true

      - name: üîç KICS Security Scan
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: .
          output_path: kics-results
          output_formats: 'json,sarif'
          fail_on: high
          enable_comments: false
        continue-on-error: true

      - name: üîç Terrascan IaC Analysis
        run: |
          # Check if Terraform files exist
          if find . -name "*.tf" -o -name "*.tfvars" | grep -q .; then
            docker run --rm -v "$(pwd):/src" \
              tenable/terrascan scan \
              -t aws,azure,gcp,k8s \
              -f /src \
              -o sarif > terrascan.sarif || true
            echo "‚úÖ Terrascan completed"
          else
            echo "‚ÑπÔ∏è No Terraform files found - skipping Terrascan"
          fi
        continue-on-error: true

      - name: üìä Generate IaC Report
        if: always()
        run: |
          echo "## üèóÔ∏è Infrastructure Scan Results" > iac-summary.md
          echo "‚úÖ Checkov scan completed" >> iac-summary.md
          echo "‚úÖ KICS scan completed" >> iac-summary.md
          if [ -f "terrascan.sarif" ]; then
            echo "‚úÖ Terrascan scan completed" >> iac-summary.md
          fi

      - name: üì§ Upload IaC Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: iac-results
          path: |
            checkov.sarif
            kics-results/
            terrascan.sarif
            iac-summary.md

  # ============================================
  # COMPLIANCE AND LICENSE CHECKS
  # ============================================
  compliance-scan:
    name: üìã Compliance & License Check
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_scan_compliance == 'true'
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4

      - name: üìú License Finder
        run: |
          docker run --rm -v $(pwd):/scan licensefinder/license_finder \
            /bin/bash -lc "cd /scan && license_finder report --format json" \
            > license-report.json || true
        continue-on-error: true

      - name: üîç Git Security Checks
        run: |
          echo "## Git Security Analysis" > git-security.md
          echo "" >> git-security.md
          
          # Check commit signatures
          echo "### Commit Signatures:" >> git-security.md
          UNSIGNED=$(git log --pretty="format:%H %G?" -10 | grep -c " N" || true)
          if [ "$UNSIGNED" -gt 0 ]; then
            echo "‚ö†Ô∏è Found $UNSIGNED unsigned commits in last 10 commits" >> git-security.md
          else
            echo "‚úÖ All recent commits are signed" >> git-security.md
          fi
          
          echo "" >> git-security.md
          echo "### Branch Protection:" >> git-security.md
          echo "‚ÑπÔ∏è Ensure branch protection rules are configured in repository settings" >> git-security.md

      - name: üìä Generate Compliance Report
        if: always()
        run: |
          echo "## üìã Compliance Scan Results" > compliance-summary.md
          echo "‚úÖ License compliance check completed" >> compliance-summary.md
          echo "‚úÖ Git security analysis completed" >> compliance-summary.md

      - name: üì§ Upload Compliance Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: compliance-results
          path: |
            license-report.json
            git-security.md
            compliance-summary.md

  # ============================================
  # FINAL SECURITY REPORT
  # ============================================
  security-report:
    name: üìä Generate Security Report
    runs-on: ubuntu-latest
    needs: 
      - prepare
      - sast-scan
      - dependency-scan
      - container-scan
      - iac-scan
      - compliance-scan
    if: always()
    steps:
      - name: üì• Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
        continue-on-error: true

      - name: üìù Generate Consolidated Report
        run: |
          cat << 'EOF' > security-report.md
          # üõ°Ô∏è Security Scan Report
          
          **Repository:** ${{ github.repository }}  
          **Branch:** ${{ github.ref_name }}  
          **Commit:** ${{ github.sha }}  
          **Triggered By:** ${{ github.actor }}  
          **Date:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
          **Trigger Type:** ${{ github.event_name }}
          
          ---
          
          ## üìä Scan Execution Summary
          
          | Scan Type | Status | Details |
          |-----------|--------|---------|
          | üîê SAST | ${{ needs.sast-scan.result }} | Static code analysis and secret detection |
          | üì¶ Dependencies | ${{ needs.dependency-scan.result }} | Vulnerability scanning in dependencies |
          | üê≥ Container | ${{ needs.container-scan.result }} | Docker image and Dockerfile analysis |
          | üèóÔ∏è Infrastructure | ${{ needs.iac-scan.result }} | IaC security and compliance checks |
          | üìã Compliance | ${{ needs.compliance-scan.result }} | License and policy compliance |
          
          ---
          
          ## üéØ Scan Decision Logic
          
          EOF
          
          echo -e "${{ needs.prepare.outputs.scan_summary }}" >> security-report.md
          
          cat << 'EOF' >> security-report.md
          
          ---
          
          ## üìå Key Findings
          
          ### Critical Actions Required:
          - Review all HIGH and CRITICAL vulnerabilities
          - Update vulnerable dependencies
          - Fix security issues before production deployment
          - Ensure all commits are signed
          - Verify branch protection rules are enabled
          
          ### Next Steps:
          1. Check the Security tab for detailed SARIF results
          2. Review artifact files for comprehensive reports
          3. Address findings based on severity
          4. Re-run scans after fixes
          
          ---
          
          ## üìÅ Available Reports
          
          The following detailed reports are available as artifacts:
          - SAST results (Semgrep, GitLeaks, TruffleHog)
          - Dependency vulnerability reports (OSV, OWASP)
          - Container scan results (Trivy, Hadolint, Grype)
          - Infrastructure analysis (Checkov, KICS, Terrascan)
          - Compliance and license reports
          
          ---
          
          *üîí This report was generated automatically by the DevSecOps pipeline*
          EOF

      - name: üí¨ Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('üõ°Ô∏è Security Scan Report')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: report
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: report
              });
            }
        continue-on-error: true

      - name: üì§ Upload Final Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: üìä Job Summary
        run: |
          cat security-report.md >> $GITHUB_STEP_SUMMARY