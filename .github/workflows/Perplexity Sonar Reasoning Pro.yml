name: Adaptive Security Scan Pipeline

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Type of scan to run'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - quick
          - sast
          - dast
          - dependency
          - container
          - infrastructure
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  schedule:
    # Run full security scan daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  GO_VERSION: '1.21'
  DOCKER_BUILDKIT: 1
  SCAN_SEVERITY_THRESHOLD: 'MEDIUM'
  # Determine if this is a lightweight scan (per-commit) or full scan (manual/scheduled)
  IS_FULL_SCAN: ${{ github.event_name == 'workflow_dispatch' || github.event_name == 'schedule' }}

jobs:
  # Preparation and change analysis
  prepare:
    name: 🔍 Prepare and Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.detect.outputs.has_python }}
      has_node: ${{ steps.detect.outputs.has_node }}
      has_docker: ${{ steps.detect.outputs.has_docker }}
      has_terraform: ${{ steps.detect.outputs.has_terraform }}
      has_kubernetes: ${{ steps.detect.outputs.has_kubernetes }}
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}
      is_full_scan: ${{ steps.scan-type.outputs.is_full_scan }}
      skip_heavy_scans: ${{ steps.scan-type.outputs.skip_heavy_scans }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📋 Determine scan type
        id: scan-type
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.event_name }}" == "schedule" ]]; then
            echo "is_full_scan=true" >> $GITHUB_OUTPUT
            echo "skip_heavy_scans=false" >> $GITHUB_OUTPUT
            echo "✅ Full comprehensive scan mode activated"
          else
            echo "is_full_scan=false" >> $GITHUB_OUTPUT
            echo "skip_heavy_scans=true" >> $GITHUB_OUTPUT
            echo "⚡ Lightweight per-commit scan mode activated"
          fi

      - name: 📂 Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          separator: ','
          files_ignore: |
            *.md
            *.txt
            LICENSE
            .gitignore
            docs/**

      - name: 🔎 Detect project technologies
        id: detect
        run: |
          echo "has_python=$([[ -f requirements.txt || -f Pipfile || -f pyproject.toml || -f setup.py ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_node=$([[ -f package.json || -f yarn.lock || -f pnpm-lock.yaml ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_docker=$([[ -f Dockerfile || -f docker-compose.yml || -f docker-compose.yaml ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_terraform=$([[ -d terraform || -f *.tf || -f *.tfvars ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "has_kubernetes=$([[ -d k8s || -d kubernetes || -f *.yaml || -f *.yml ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          
          echo "📊 Project Analysis Results:"
          echo "  Python: $([[ -f requirements.txt || -f Pipfile || -f pyproject.toml || -f setup.py ]] && echo "✅ Detected" || echo "❌ Not found")"
          echo "  Node.js: $([[ -f package.json || -f yarn.lock || -f pnpm-lock.yaml ]] && echo "✅ Detected" || echo "❌ Not found")"
          echo "  Docker: $([[ -f Dockerfile || -f docker-compose.yml || -f docker-compose.yaml ]] && echo "✅ Detected" || echo "❌ Not found")"
          echo "  Terraform: $([[ -d terraform || -f *.tf || -f *.tfvars ]] && echo "✅ Detected" || echo "❌ Not found")"
          echo "  Kubernetes: $([[ -d k8s || -d kubernetes || -f *.yaml || -f *.yml ]] && echo "✅ Detected" || echo "❌ Not found")"

  # Essential security scans (always run)
  essential-security:
    name: 🔒 Essential Security Scans
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Semgrep SAST Scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/cwe-top-25
          generateSarif: true
        continue-on-error: true

      - name: 🕵️ Gitleaks Secret Detection
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 🔐 TruffleHog Secret Scan
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: 📦 OSV Scanner - Vulnerability Check
        uses: google/osv-scanner/github-action@v1
        with:
          scan-args: |-
            --recursive
            --skip-git
            ./
        continue-on-error: true

      - name: 📊 Upload Essential Scan Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif
        continue-on-error: true

  # Comprehensive SAST (only for full scans)
  advanced-sast:
    name: 🛡️ Advanced SAST Analysis
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.is_full_scan == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔬 CodeQL Security Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: 'javascript,python,java,go,csharp'
          queries: security-and-quality
        continue-on-error: true

      - name: 🏗️ CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3
        continue-on-error: true

      - name: 🎯 Execute CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        continue-on-error: true

      - name: 🐍 Bandit Python Security Scan
        if: needs.prepare.outputs.has_python == 'true'
        run: |
          echo "🐍 Running Python security analysis..."
          pip install bandit[toml]
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f sarif -o bandit.sarif || true
        continue-on-error: true

  # Dependency scanning (conditional based on scan type)
  dependency-scan:
    name: 📦 Dependency Vulnerability Analysis
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      needs.prepare.outputs.is_full_scan == 'true' || 
      (needs.prepare.outputs.skip_heavy_scans == 'true' && 
       (contains(needs.prepare.outputs.changed_files, 'requirements.txt') ||
        contains(needs.prepare.outputs.changed_files, 'package.json') ||
        contains(needs.prepare.outputs.changed_files, 'go.mod') ||
        contains(needs.prepare.outputs.changed_files, 'pom.xml')))
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚖️ OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ github.repository }}
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
        continue-on-error: true

      - name: 🛡️ Python Safety Check
        if: needs.prepare.outputs.has_python == 'true'
        run: |
          echo "🔍 Scanning Python dependencies for vulnerabilities..."
          pip install safety
          safety check --json > safety-report.json || true
          safety check || true
        continue-on-error: true

      - name: 📊 NPM Security Audit
        if: needs.prepare.outputs.has_node == 'true'
        run: |
          echo "🔍 Scanning Node.js dependencies..."
          npm audit --audit-level=moderate || true
          npm audit --json > npm-audit.json || true
        continue-on-error: true

  # Container scanning (only for full scans or Docker file changes)
  container-scan:
    name: 🐳 Container Security Analysis
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      needs.prepare.outputs.has_docker == 'true' &&
      (needs.prepare.outputs.is_full_scan == 'true' ||
       contains(needs.prepare.outputs.changed_files, 'Dockerfile') ||
       contains(needs.prepare.outputs.changed_files, 'docker-compose'))
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker Image
        id: docker-build
        run: |
          echo "🐳 Building Docker image for security analysis..."
          docker build -t security-scan:${{ github.sha }} .
          echo "image=security-scan:${{ github.sha }}" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: 🔍 Trivy Container Security Scan
        uses: aquasecurity/trivy-action@master
        if: steps.docker-build.outcome == 'success'
        with:
          image-ref: ${{ steps.docker-build.outputs.image }}
          format: 'sarif'
          output: 'trivy-container.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
          exit-code: '0'
        continue-on-error: true

      - name: 🎯 Grype Container Vulnerability Scan
        uses: anchore/scan-action@v3
        if: steps.docker-build.outcome == 'success'
        with:
          image: ${{ steps.docker-build.outputs.image }}
          severity-cutoff: medium
          fail-build: false
        continue-on-error: true

      - name: 📝 Hadolint Dockerfile Analysis
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          format: sarif
          output-file: hadolint.sarif
          no-fail: true
        continue-on-error: true

  # Infrastructure as Code scanning (only for full scans or IaC changes)
  iac-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: |
      (needs.prepare.outputs.has_terraform == 'true' || 
       needs.prepare.outputs.has_kubernetes == 'true') &&
      (needs.prepare.outputs.is_full_scan == 'true' ||
       contains(needs.prepare.outputs.changed_files, '.tf') ||
       contains(needs.prepare.outputs.changed_files, '.yaml') ||
       contains(needs.prepare.outputs.changed_files, '.yml'))
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ✅ Checkov IaC Security Scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          quiet: false
          soft_fail: true
          framework: all
          output_format: sarif
          output_file_path: checkov.sarif
        continue-on-error: true

      - name: 🔍 KICS Infrastructure Security Scan
        uses: checkmarx/kics-github-action@v1.7.0
        with:
          path: .
          output_path: kics-results
          output_formats: 'json,sarif'
          fail_on: high
          enable_comments: true
        continue-on-error: true

  # Dynamic Application Security Testing (only for full scans)
  dast-scan:
    name: 🌐 Dynamic Application Security Testing
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.is_full_scan == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ ZAP Security Scan
        uses: zaproxy/action-full-scan@v0.9.0
        with:
          target: ${{ secrets.DAST_TARGET_URL || 'http://localhost:8080' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -l WARN'
          allow_issue_writing: false
          artifact_name: zap_scan_results
        continue-on-error: true

      - name: 🎯 Nuclei Vulnerability Scanner
        uses: projectdiscovery/nuclei-action@main
        with:
          target: ${{ secrets.DAST_TARGET_URL || 'http://localhost:8080' }}
          flags: '-severity critical,high,medium'
          output: nuclei-report.json
        continue-on-error: true

  # License compliance (only for full scans)
  license-compliance:
    name: 📜 License Compliance Check
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.is_full_scan == 'true'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚖️ License Compliance Scan
        run: |
          echo "📜 Analyzing license compliance..."
          docker run --rm -v $(pwd):/scan licensefinder/license_finder \
            /bin/bash -lc "cd /scan && license_finder report --format json" \
            > license-report.json || true
          
          # Generate human-readable license summary
          echo "📊 License Summary:" > license-summary.txt
          echo "Scan completed at: $(date)" >> license-summary.txt
        continue-on-error: true

  # Policy and compliance checks (always run but with different depth)
  policy-compliance:
    name: 📋 Policy and Compliance Verification
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔒 Git Security Analysis
        run: |
          echo "🔍 Performing Git security checks..."
          
          # Check for signed commits (last 10 commits)
          echo "📝 Commit Signature Analysis:"
          git log --pretty="format:%H %G? %s" -10 | while read line; do
            if [[ "$line" =~ " G " ]]; then
              echo "  ✅ Signed: $(echo "$line" | cut -d' ' -f3-)"
            else
              echo "  ⚠️  Unsigned: $(echo "$line" | cut -d' ' -f3-)"
            fi
          done
          
          # Check for sensitive patterns in commit messages
          echo "🔍 Checking for sensitive information in commits..."
          git log --oneline -20 | grep -iE "(password|secret|key|token)" && \
            echo "⚠️  Warning: Potential sensitive information found in commit messages" || \
            echo "✅ No sensitive patterns detected in commit messages"
        continue-on-error: true

      - name: 📊 Open Policy Agent Validation
        if: needs.prepare.outputs.is_full_scan == 'true'
        run: |
          if [ -d "policies" ]; then
            echo "🔍 Running OPA policy validation..."
            docker run --rm -v $(pwd):/project \
              openpolicyagent/opa test /project/policies || true
          else
            echo "📝 No OPA policies found to validate"
          fi
        continue-on-error: true

  # Generate comprehensive security report
  security-report:
    name: 📊 Security Analysis Report
    runs-on: ubuntu-latest
    needs: 
      - prepare
      - essential-security
      - advanced-sast
      - dependency-scan
      - container-scan
      - iac-scan
      - dast-scan
      - license-compliance
      - policy-compliance
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📂 Download security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts
        continue-on-error: true

      - name: 📋 Generate Security Dashboard
        run: |
          echo "# 🔐 Security Analysis Dashboard" > security-dashboard.md
          echo "" >> security-dashboard.md
          echo "**📅 Scan Date:** $(date '+%Y-%m-%d %H:%M:%S UTC')" >> security-dashboard.md
          echo "**📦 Repository:** ${{ github.repository }}" >> security-dashboard.md
          echo "**📝 Commit:** \`${{ github.sha }}\`" >> security-dashboard.md
          echo "**👤 Triggered By:** @${{ github.actor }}" >> security-dashboard.md
          echo "**🎯 Scan Mode:** ${{ needs.prepare.outputs.is_full_scan == 'true' && 'Full Comprehensive Scan 🎯' || 'Lightweight Per-Commit Scan ⚡' }}" >> security-dashboard.md
          echo "" >> security-dashboard.md
          
          # Create scan status function
          get_status_icon() {
            case "\$1" in
              "success") echo "✅" ;;
              "failure") echo "❌" ;;
              "skipped") echo "⏭️" ;;
              "cancelled") echo "🚫" ;;
              *) echo "❓" ;;
            esac
          }
          
          echo "## 📊 Security Scan Results" >> security-dashboard.md
          echo "" >> security-dashboard.md
          echo "| 🔍 Scan Type | 📊 Status | 🎯 Action |" >> security-dashboard.md
          echo "|--------------|-----------|-----------|" >> security-dashboard.md
          echo "| Essential Security | $(get_status_icon "${{ needs.essential-security.result }}") ${{ needs.essential-security.result }} | Always executed |" >> security-dashboard.md
          echo "| Advanced SAST | $(get_status_icon "${{ needs.advanced-sast.result }}") ${{ needs.advanced-sast.result }} | ${{ needs.prepare.outputs.is_full_scan == 'true' && 'Executed' || 'Skipped (lightweight mode)' }} |" >> security-dashboard.md
          echo "| Dependency Scan | $(get_status_icon "${{ needs.dependency-scan.result }}") ${{ needs.dependency-scan.result }} | ${{ needs.dependency-scan.result == 'skipped' && 'Skipped (no dependency changes)' || 'Executed' }} |" >> security-dashboard.md
          echo "| Container Security | $(get_status_icon "${{ needs.container-scan.result }}") ${{ needs.container-scan.result }} | ${{ needs.container-scan.result == 'skipped' && 'Skipped (no container changes)' || 'Executed' }} |" >> security-dashboard.md
          echo "| Infrastructure Scan | $(get_status_icon "${{ needs.iac-scan.result }}") ${{ needs.iac-scan.result }} | ${{ needs.iac-scan.result == 'skipped' && 'Skipped (no IaC changes)' || 'Executed' }} |" >> security-dashboard.md
          echo "| DAST Analysis | $(get_status_icon "${{ needs.dast-scan.result }}") ${{ needs.dast-scan.result }} | ${{ needs.prepare.outputs.is_full_scan == 'true' && 'Executed' || 'Skipped (lightweight mode)' }} |" >> security-dashboard.md
          echo "| License Compliance | $(get_status_icon "${{ needs.license-compliance.result }}") ${{ needs.license-compliance.result }} | ${{ needs.prepare.outputs.is_full_scan == 'true' && 'Executed' || 'Skipped (lightweight mode)' }} |" >> security-dashboard.md
          echo "| Policy Compliance | $(get_status_icon "${{ needs.policy-compliance.result }}") ${{ needs.policy-compliance.result }} | Always executed |" >> security-dashboard.md
          echo "" >> security-dashboard.md
          
          echo "## 🎯 Security Recommendations" >> security-dashboard.md
          echo "" >> security-dashboard.md
          
          if [[ "${{ needs.prepare.outputs.is_full_scan }}" == "true" ]]; then
            echo "### 🔍 Comprehensive Scan Recommendations" >> security-dashboard.md
            echo "- 🚨 **Critical/High vulnerabilities**: Address immediately before deployment" >> security-dashboard.md
            echo "- 📦 **Dependency updates**: Update packages with known vulnerabilities" >> security-dashboard.md
            echo "- 🐳 **Container security**: Review container scan results for base image vulnerabilities" >> security-dashboard.md
            echo "- 🏗️ **Infrastructure**: Validate IaC security configurations" >> security-dashboard.md
            echo "- ⚖️ **License compliance**: Review license compatibility issues" >> security-dashboard.md
          else
            echo "### ⚡ Quick Scan Recommendations" >> security-dashboard.md
            echo "- 🔒 **Secrets**: No exposed secrets detected in recent changes" >> security-dashboard.md
            echo "- 📝 **Code quality**: Review SAST findings for security anti-patterns" >> security-dashboard.md
            echo "- 🎯 **Full scan**: Run manual comprehensive scan before production deployment" >> security-dashboard.md
          fi
          
          echo "" >> security-dashboard.md
          echo "## 🚀 Next Steps" >> security-dashboard.md
          echo "" >> security-dashboard.md
          echo "1. 📖 Review detailed scan reports in the **Security** tab" >> security-dashboard.md
          echo "2. 🔧 Address any **HIGH** or **CRITICAL** severity findings" >> security-dashboard.md
          echo "3. 📦 Update vulnerable dependencies identified in scans" >> security-dashboard.md
          echo "4. ✅ Re-run scans after implementing fixes" >> security-dashboard.md
          
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "5. 🔒 Ensure all security checks pass before merging" >> security-dashboard.md
          fi

      - name: 📤 Upload Security Dashboard
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-dashboard
          path: security-dashboard.md

      - name: 💬 Post PR Security Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const dashboard = fs.readFileSync('security-dashboard.md', 'utf8');
            
            const body = `
            ## 🔐 Security Analysis Complete
            
            ${dashboard}
            
            ---
            *🤖 This security analysis was generated automatically. For questions, contact your DevSecOps team.*
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
        continue-on-error: true

      - name: 📱 Security Status Summary
        run: |
          echo "🔐 SECURITY SCAN COMPLETION SUMMARY"
          echo "=================================="
          echo ""
          echo "📊 Overall Status: ${{ job.status }}"
          echo "🎯 Scan Mode: ${{ needs.prepare.outputs.is_full_scan == 'true' && 'Full Comprehensive Analysis' || 'Lightweight Per-Commit Scan' }}"
          echo "📅 Completed: $(date)"
          echo ""
          echo "🔍 Executed Scans:"
          echo "  Essential Security: ${{ needs.essential-security.result }}"
          echo "  Advanced SAST: ${{ needs.advanced-sast.result }}"
          echo "  Dependency Analysis: ${{ needs.dependency-scan.result }}"
          echo "  Container Security: ${{ needs.container-scan.result }}"
          echo "  Infrastructure: ${{ needs.iac-scan.result }}"
          echo "  DAST Testing: ${{ needs.dast-scan.result }}"
          echo "  License Compliance: ${{ needs.license-compliance.result }}"
          echo "  Policy Verification: ${{ needs.policy-compliance.result }}"
          echo ""
          if [[ "${{ needs.prepare.outputs.is_full_scan }}" != "true" ]]; then
            echo "💡 Tip: Run 'workflow_dispatch' for comprehensive security analysis"
          fi

      - name: 🔔 Slack Notification
        if: always() && env.SLACK_WEBHOOK_URL != '' && needs.prepare.outputs.is_full_scan == 'true'
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              attachments: [{
                color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
                title: '🔐 Security Analysis Complete',
                fields: [
                  {
                    title: 'Repository',
                    value: '${{ github.repository }}',
                    short: true
                  },
                  {
                    title: 'Scan Type',
                    value: '${{ needs.prepare.outputs.is_full_scan == 'true' && 'Comprehensive' || 'Lightweight' }}',
                    short: true
                  },
                  {
                    title: 'Triggered By',
                    value: '${{ github.actor }}',
                    short: true
                  },
                  {
                    title: 'Status',
                    value: '${{ job.status }}',
                    short: true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        continue-on-error: true