name: Perplexity Sonar Reasoning Pro Security Pipeline

on:
  workflow_dispatch:
    inputs:
      scan_type:
        description: 'Select scan scope'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - essential
          - sast
          - dast
          - dependency
          - container
          - infrastructure
      force_all_scans:
        description: 'Force run all scans (override skip logic)'
        required: false
        default: false
        type: boolean
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
    types: [ opened, synchronize, reopened ]
  schedule:
    - cron: '0 2 * * *'

env:
  # Simplified environment variables
  SCAN_SEVERITY: 'MEDIUM'
  DOCKER_BUILDKIT: 1
  # Key variable to control scan behavior
  IS_MANUAL_TRIGGER: ${{ github.event_name == 'workflow_dispatch' }}
  IS_SCHEDULED: ${{ github.event_name == 'schedule' }}
  FORCE_ALL_SCANS: ${{ github.event.inputs.force_all_scans == 'true' }}

jobs:
  # Preparation job (always runs)
  prepare:
    name: 🔍 Analyze Repository
    runs-on: ubuntu-latest
    outputs:
      has_python: ${{ steps.detect.outputs.has_python }}
      has_node: ${{ steps.detect.outputs.has_node }}
      has_docker: ${{ steps.detect.outputs.has_docker }}
      has_terraform: ${{ steps.detect.outputs.has_terraform }}
      has_kubernetes: ${{ steps.detect.outputs.has_kubernetes }}
      run_full_scan: ${{ steps.scan-logic.outputs.run_full_scan }}
      run_dast: ${{ steps.scan-logic.outputs.run_dast }}
      run_container: ${{ steps.scan-logic.outputs.run_container }}
      run_iac: ${{ steps.scan-logic.outputs.run_iac }}
      changed_files: ${{ steps.files.outputs.all_changed_files }}
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔎 Detect Technologies
        id: detect
        run: |
          # Simplified detection logic
          has_python="false"
          has_node="false"
          has_docker="false"
          has_terraform="false"
          has_kubernetes="false"
          
          [[ -f "requirements.txt" || -f "pyproject.toml" || -f "setup.py" ]] && has_python="true"
          [[ -f "package.json" || -f "yarn.lock" ]] && has_node="true"
          [[ -f "Dockerfile" || -f "docker-compose.yml" ]] && has_docker="true"
          [[ -f "*.tf" || -d "terraform" ]] && has_terraform="true"
          [[ -d "k8s" || -d "kubernetes" ]] && has_kubernetes="true"
          
          echo "has_python=$has_python" >> $GITHUB_OUTPUT
          echo "has_node=$has_node" >> $GITHUB_OUTPUT
          echo "has_docker=$has_docker" >> $GITHUB_OUTPUT
          echo "has_terraform=$has_terraform" >> $GITHUB_OUTPUT
          echo "has_kubernetes=$has_kubernetes" >> $GITHUB_OUTPUT
          
          echo "📊 Technology Detection Results:"
          echo "  🐍 Python: $has_python"
          echo "  📦 Node.js: $has_node"
          echo "  🐳 Docker: $has_docker"
          echo "  🏗️ Terraform: $has_terraform"
          echo "  ☸️ Kubernetes: $has_kubernetes"

      - name: 📂 Analyze Changed Files
        id: files
        uses: tj-actions/changed-files@v41
        with:
          separator: ','

      - name: 🎯 Configure Scan Logic
        id: scan-logic
        run: |
          # Clear scan logic - no complex conditions
          if [[ "${{ env.IS_MANUAL_TRIGGER }}" == "true" || "${{ env.IS_SCHEDULED }}" == "true" || "${{ env.FORCE_ALL_SCANS }}" == "true" ]]; then
            echo "🎯 Full comprehensive scan mode"
            echo "run_full_scan=true" >> $GITHUB_OUTPUT
            echo "run_dast=true" >> $GITHUB_OUTPUT
            echo "run_container=true" >> $GITHUB_OUTPUT
            echo "run_iac=true" >> $GITHUB_OUTPUT
          else
            echo "⚡ Lightweight per-commit scan mode"
            echo "run_full_scan=false" >> $GITHUB_OUTPUT
            echo "run_dast=false" >> $GITHUB_OUTPUT
            echo "run_container=false" >> $GITHUB_OUTPUT
            echo "run_iac=false" >> $GITHUB_OUTPUT
          fi

  # Essential scans (always run - no dependencies)
  essential-security:
    name: 🔒 Essential Security Scans
    runs-on: ubuntu-latest
    # Remove complex conditions - this always runs
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 Semgrep Security Analysis
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/security-audit
          generateSarif: true
        continue-on-error: true

      - name: 🕵️ Secret Detection - Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: 🔐 Secret Detection - TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

      - name: 📊 OSV Vulnerability Scanner
        uses: google/osv-scanner-action@v1
        with:
          scan-args: --recursive ./
        continue-on-error: true

  # Advanced SAST (runs based on scan type)
  advanced-sast:
    name: 🛡️ Advanced SAST Analysis
    runs-on: ubuntu-latest
    needs: prepare
    # Fixed condition - will run on manual trigger or when scan_type is sast
    if: ${{ needs.prepare.outputs.run_full_scan == 'true' || github.event.inputs.scan_type == 'sast' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔬 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript,python,java,go,csharp
          queries: security-and-quality

      - name: 🏗️ CodeQL Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🎯 CodeQL Security Analysis
        uses: github/codeql-action/analyze@v3

  # Dependency scanning (simplified conditions)
  dependency-scan:
    name: 📦 Dependency Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    # Simplified condition logic
    if: ${{ needs.prepare.outputs.run_full_scan == 'true' || github.event.inputs.scan_type == 'dependency' || contains(needs.prepare.outputs.changed_files, 'requirements.txt') || contains(needs.prepare.outputs.changed_files, 'package.json') }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚖️ OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: ${{ github.repository }}
          path: '.'
          format: 'JSON,HTML'
        continue-on-error: true

      - name: 🛡️ Snyk Vulnerability Scan
        if: needs.prepare.outputs.has_node == 'true'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Container scanning (fixed conditions)
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    # Fixed: clear condition without complex logic
    if: ${{ needs.prepare.outputs.has_docker == 'true' && (needs.prepare.outputs.run_container == 'true' || github.event.inputs.scan_type == 'container') }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Test Image
        run: |
          echo "🐳 Building image for security analysis..."
          docker build -t scan-target:latest .

      - name: 🔍 Trivy Container Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'scan-target:latest'
          format: 'sarif'
          output: 'trivy.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

  # Infrastructure scanning (simplified)
  iac-scan:
    name: 🏗️ Infrastructure Security Scan
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ (needs.prepare.outputs.has_terraform == 'true' || needs.prepare.outputs.has_kubernetes == 'true') && (needs.prepare.outputs.run_iac == 'true' || github.event.inputs.scan_type == 'infrastructure') }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ✅ Checkov IaC Analysis
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          soft_fail: true
          output_format: sarif
          output_file_path: checkov.sarif
        continue-on-error: true

  # DAST scanning (fixed ZAP execution)
  dast-scan:
    name: 🌐 Dynamic Security Testing
    runs-on: ubuntu-latest
    needs: prepare
    # Fixed condition - this was the main issue causing ZAP to not run
    if: ${{ needs.prepare.outputs.run_dast == 'true' || github.event.inputs.scan_type == 'dast' || github.event.inputs.scan_type == 'all' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚡ ZAP Full Security Scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: ${{ secrets.DAST_TARGET_URL || 'http://localhost:8080' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-j -a -z "-config replacer.full_list(0).description=auth1 -config replacer.full_list(0).enabled=true"'
          allow_issue_writing: true
          fail_action: false
          docker_name: 'owasp/zap2docker-stable'
        continue-on-error: true

      - name: 🚀 Runtime Java Application Test
        if: needs.prepare.outputs.has_java == 'true'
        run: |
          cd java_wordstop
          mvn clean package
          java -jar target/*.jar &
          sleep 10
          curl -sSf http://localhost:8080/health || true
        continue-on-error: true

      - name: 🐍 Runtime Python Application Test
        if: needs.prepare.outputs.has_python == 'true'
        run: |
          cd python_wordstop
          pip install -r requirements.txt
          python wordstop.py &
          sleep 5
          curl -sSf http://localhost:5000/health || true
        continue-on-error: true

      - name: 🔍 Runtime Security Analysis
        run: |
          # Check running processes
          ps aux | grep -E "java|python" || true
          # Check open ports
          netstat -tulpn || true
          # Check application logs
          find . -name "*.log" -type f -exec tail -n 50 {} \; || true
        continue-on-error: true

      - name: 🎯 Nuclei Security Scanner
        uses: projectdiscovery/nuclei-action@main
        with:
          target: ${{ secrets.DAST_TARGET_URL || 'https://example.com' }}
          flags: '-severity critical,high'
        continue-on-error: true

  # License compliance (only on full scans)
  license-scan:
    name: 📜 License Compliance
    runs-on: ubuntu-latest
    needs: prepare
    if: ${{ needs.prepare.outputs.run_full_scan == 'true' || github.event.inputs.scan_type == 'all' }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: ⚖️ License Analysis
        run: |
          echo "📜 Analyzing project licenses..."
          # Using license-checker for Node.js projects
          if [[ "${{ needs.prepare.outputs.has_node }}" == "true" ]]; then
            npx license-checker --json > license-report.json || true
          fi
          
          # Using pip-licenses for Python projects  
          if [[ "${{ needs.prepare.outputs.has_python }}" == "true" ]]; then
            pip install pip-licenses
            pip-licenses --format=json > python-licenses.json || true
          fi
        continue-on-error: true

  # Security reporting (independent job with fixed dependencies)
  security-report:
    name: 📊 Security Report Generator
    runs-on: ubuntu-latest
    # Fixed: Use if: always() and remove complex needs dependency
    if: always()
    needs: 
      - prepare
      - essential-security
      - advanced-sast
      - dependency-scan
      - container-scan
      - iac-scan
      - dast-scan
      - license-scan
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📋 Generate Security Dashboard
        run: |
          echo "# 🔐 DevSecOps Security Analysis Report" > SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          echo "## 📈 Scan Overview" >> SECURITY_REPORT.md
          echo "- **📅 Execution Date:** $(date)" >> SECURITY_REPORT.md
          echo "- **📦 Repository:** ${{ github.repository }}" >> SECURITY_REPORT.md
          echo "- **🔄 Commit SHA:** \`${{ github.sha }}\`" >> SECURITY_REPORT.md
          echo "- **👤 Triggered By:** @${{ github.actor }}" >> SECURITY_REPORT.md
          echo "- **🎯 Scan Type:** ${{ github.event.inputs.scan_type || 'commit-triggered' }}" >> SECURITY_REPORT.md
          echo "- **⚡ Mode:** ${{ env.IS_MANUAL_TRIGGER == 'true' && 'Manual Full Scan' || 'Automated Lightweight Scan' }}" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          
          # Fixed status reporting function
          echo "## 🎯 Security Scan Results" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          
          # Create results table with proper status handling
          cat << 'EOF' >> SECURITY_REPORT.md
          | 🔍 Security Domain | 📊 Status | 💡 Notes |
          |-------------------|-----------|----------|
          | Essential Security | ${{ needs.essential-security.result == 'success' && '✅ Passed' || needs.essential-security.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Core security checks |
          | Advanced SAST | ${{ needs.advanced-sast.result == 'success' && '✅ Passed' || needs.advanced-sast.result == 'failure' && '❌ Failed' || needs.advanced-sast.result == 'skipped' && '⏭️ Skipped' || '❓ Not Run' }} | Deep code analysis |
          | Dependency Analysis | ${{ needs.dependency-scan.result == 'success' && '✅ Passed' || needs.dependency-scan.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Library vulnerabilities |
          | Container Security | ${{ needs.container-scan.result == 'success' && '✅ Passed' || needs.container-scan.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Docker image analysis |
          | Infrastructure Scan | ${{ needs.iac-scan.result == 'success' && '✅ Passed' || needs.iac-scan.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | IaC security validation |
          | Dynamic Testing (DAST) | ${{ needs.dast-scan.result == 'success' && '✅ Passed' || needs.dast-scan.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Runtime vulnerability testing |
          | License Compliance | ${{ needs.license-scan.result == 'success' && '✅ Passed' || needs.license-scan.result == 'failure' && '❌ Failed' || '⏭️ Skipped' }} | Legal compliance check |
          EOF
          
          echo "" >> SECURITY_REPORT.md
          echo "## 🚀 Recommendations" >> SECURITY_REPORT.md
          echo "" >> SECURITY_REPORT.md
          
          # Dynamic recommendations based on what actually ran
          if [[ "${{ needs.dast-scan.result }}" == "skipped" ]]; then
            echo "- 🌐 **DAST Testing**: Run manual workflow with 'dast' or 'all' scan type for web application security testing" >> SECURITY_REPORT.md
          fi
          
          if [[ "${{ needs.container-scan.result }}" == "skipped" ]]; then
            echo "- 🐳 **Container Security**: Enable container scanning by ensuring Docker files are present" >> SECURITY_REPORT.md
          fi
          
          if [[ "${{ needs.advanced-sast.result }}" == "skipped" ]]; then
            echo "- 🛡️ **Advanced Analysis**: Trigger manual scan for comprehensive code security analysis" >> SECURITY_REPORT.md
          fi
          
          echo "- 🔄 **Regular Scans**: Schedule comprehensive security scans before releases" >> SECURITY_REPORT.md
          echo "- 📊 **Monitor Results**: Check GitHub Security tab for detailed vulnerability reports" >> SECURITY_REPORT.md
          
          echo "" >> SECURITY_REPORT.md
          echo "---" >> SECURITY_REPORT.md
          echo "*🤖 Report generated by DevSecOps Pipeline | $(date)*" >> SECURITY_REPORT.md

      - name: 📤 Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-analysis-report
          path: SECURITY_REPORT.md

      - name: 💬 Comment on Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('SECURITY_REPORT.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
        continue-on-error: true

      - name: 📊 Job Summary Display
        run: |
          echo "🔐 SECURITY PIPELINE SUMMARY" >> $GITHUB_STEP_SUMMARY
          echo "===========================" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**🎯 Scan Configuration:**" >> $GITHUB_STEP_SUMMARY
          echo "- Manual Trigger: ${{ env.IS_MANUAL_TRIGGER }}" >> $GITHUB_STEP_SUMMARY
          echo "- Full Scan Mode: ${{ needs.prepare.outputs.run_full_scan }}" >> $GITHUB_STEP_SUMMARY
          echo "- DAST Enabled: ${{ needs.prepare.outputs.run_dast }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**📊 Execution Results:**" >> $GITHUB_STEP_SUMMARY
          echo "- Essential Security: ${{ needs.essential-security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Advanced SAST: ${{ needs.advanced-sast.result }}" >> $GITHUB_STEP_SUMMARY  
          echo "- Dependency Scan: ${{ needs.dependency-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Container Security: ${{ needs.container-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Infrastructure: ${{ needs.iac-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- DAST (ZAP/Nuclei): ${{ needs.dast-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Compliance: ${{ needs.license-scan.result }}" >> $GITHUB_STEP_SUMMARY